[project]
name = "ansible-toolbox"
version = "0.1.0"
description = "Run Ansible Playbooks from a docker container"
authors = [{ name = "Nuno Goncalves", email = "nunog@nasgware.com" }]
maintainers = [{ name = "Nuno Goncalves", email = "nunog@nasgware.com" }]
dependencies = []
requires-python = ">=3.9"
readme = "README.md"
license = { text = "MIT" }

[project.scripts]
at = "ansible_toolbox.__main__:main"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.dev-dependencies]
dev = [
    "pytest-cov>=5.0.0",
    "pytest>=8.3.3",
    "pyinstall>=0.1.4",
    "ruff>=0.7.0",
    "mypy>=1.12.0",
    "pyclean>=3.1.0",
    "pre-commit>=3.5.0",
    "gitlint>=0.19.1",
    "pytest-mock>=3.14.0",
]

[tool.pdm.scripts]
at = { call = "ansible_toolbox.__main__:main" }

[tool.semantic_release]
build_command = "just build"
commit_parser = "angular"
logging_use_named_masks = false
allow_zero_version = true
version_toml = ["pyproject.toml:project.version"]

[tool.semantic_release.branches.main]
match = "(main)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    '''chore(?:\([^)]*?\))?: .+''',
    '''ci(?:\([^)]*?\))?: .+''',
    '''refactor(?:\([^)]*?\))?: .+''',
    '''style(?:\([^)]*?\))?: .+''',
    '''test(?:\([^)]*?\))?: .+''',
    '''build\((?!deps\): .+)''',
    '''Merged? .*''',
    '''Initial Commit.*''',
    # Old semantic-release version commits
    '''^\d+\.\d+\.\d+''',
]

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = false

[tool.semantic_release.commit_parser_options]
major_tags = ["BREAKING CHANGE"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "style",
    "refactor",
    "test",
]
allowed_tags = [
    "feat",
    "fix",
    "perf",
    "build",
    "chore",
    "ci",
    "docs",
    "style",
    "refactor",
    "test",
]
default_bump_level = 0
parse_squash_commits = false

[tool.semantic_release.remote]
type = "github"
insecure = false
token = { env = "GITHUB_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
upload_to_pypi = false
